// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

var version = S.object(function (s) {
      return {
              id: s.f("id", S.option(S.string)),
              keywords: s.f("keywords", S.option(S.array(S.string))),
              dist: s.f("dist", S.object(function (s) {
                        return {
                                tarball: s.f("tarball", S.string)
                              };
                      }))
            };
    });

var packageDetails = S.union([
      S.object(function (s) {
            return {
                    TAG: "Error",
                    _0: s.f("error", S.string)
                  };
          }),
      S.object(function (s) {
            return {
                    TAG: "Ok",
                    _0: {
                      versions: s.f("versions", S.dict(version)),
                      distTags: s.f("dist-tags", S.object(function (s) {
                                return {
                                        latest: s.f("latest", S.option(S.string))
                                      };
                              })),
                      keywords: s.f("keywords", S.option(S.array(S.string))),
                      name: s.f("name", S.string)
                    }
                  };
          })
    ]);

async function fetchPackageDetails(packageName) {
  var result = decodeURI(packageName);
  var url = "https://registry.npmjs.org/" + result;
  var result$1 = await fetch(url).then(function (prim) {
        return prim.json();
      });
  return S.parseJsonOrThrow(result$1, packageDetails);
}

function getLatestVersion(packageDetails) {
  return Core__Option.flatMap(packageDetails.distTags.latest, (function (__x) {
                return packageDetails.versions[__x];
              }));
}

function tarballUrl(version) {
  return version.dist.tarball;
}

function versionTarballUrl(packageDetails, version) {
  return Core__Option.map((function (__x) {
                  return packageDetails.versions[__x];
                })(version), tarballUrl);
}

export {
  fetchPackageDetails ,
  getLatestVersion ,
  tarballUrl ,
  versionTarballUrl ,
}
/* version Not a pure module */
