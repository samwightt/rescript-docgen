// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nodepath from "node:path";
import * as Promises from "fs/promises";

async function getAllDirectories(directoryPath) {
  var dirents = await Promises.readdir(directoryPath, {"withFileTypes": true, "recursive": true});
  return dirents.filter(function (dirent) {
                return dirent.isDirectory();
              }).map(function (dirent) {
              return Nodepath.resolve(directoryPath, dirent.name);
            });
}

function getSourceDirs(sources, path) {
  var mapSource = function (source) {
    var joinedPath = Nodepath.resolve(path, source.dir);
    var list = source.subdirs;
    var subdirsPromise;
    subdirsPromise = typeof list !== "object" ? (
        list === "TraverseAll" ? getAllDirectories(joinedPath) : Promise.resolve([])
      ) : getSourceDirs(list._0, joinedPath);
    return subdirsPromise.then(function (__x) {
                return __x.concat([joinedPath]);
              });
  };
  return Promise.all(sources.map(mapSource)).then(function (prim) {
              return prim.flat();
            });
}

export {
  getAllDirectories ,
  getSourceDirs ,
}
/* node:path Not a pure module */
