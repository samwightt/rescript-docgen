// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Bun from "bun";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as RescriptCore from "@rescript/core/src/RescriptCore.res.mjs";
import * as Tools_Docgen from "@rescript/tools/npm/Tools_Docgen.res.mjs";
import * as RescriptTools from "@rescript/tools/npm/RescriptTools.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var binaryPath = RescriptTools.getBinaryPath();

function stderrText(err) {
  return err.stderr.toString();
}

function $$instanceof(exn, value) {
  return (exn instanceof value);
}

function isShellError(__x) {
  return $$instanceof(__x, $$Bun.$.ShellError);
}

function toShellError(exn) {
  if ($$instanceof(exn, $$Bun.$.ShellError)) {
    return Caml_option.some(exn);
  }
  
}

var ShellError = {
  stderrText: stderrText,
  $$instanceof: $$instanceof,
  isShellError: isShellError,
  toShellError: toShellError
};

function isFileDoesntExistError(exn) {
  var text = Core__Option.map(toShellError(exn), stderrText);
  if (text !== undefined) {
    return text.includes("No such file or directory");
  } else {
    return false;
  }
}

async function parseModule(path) {
  try {
    var res = await $$Bun.$`${binaryPath} doc ${path}`.quiet().text();
    var json = JSON.parse(res);
    var res$1 = Tools_Docgen.decodeFromJson(json);
    return {
            TAG: "Ok",
            _0: res$1
          };
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Js_exn.$$Error) {
      if (isFileDoesntExistError(err._1)) {
        return {
                TAG: "Error",
                _0: "FileDoesNotExist"
              };
      } else {
        return RescriptCore.panic("Unexpected error occurred");
      }
    }
    throw err;
  }
}

export {
  binaryPath ,
  ShellError ,
  isFileDoesntExistError ,
  parseModule ,
}
/* binaryPath Not a pure module */
