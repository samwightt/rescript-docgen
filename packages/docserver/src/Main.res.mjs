// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Layout from "./Layout.res.mjs";
import * as Handler from "./Handler.res.mjs";
import * as Process from "process";
import * as Hjsx$ResX from "rescript-x/src/Hjsx.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Result from "@rescript/core/src/Core__Result.res.mjs";
import * as BunUtils$ResX from "rescript-x/src/BunUtils.res.mjs";
import * as Handlers$ResX from "rescript-x/src/Handlers.res.mjs";
import * as RequestController$ResX from "rescript-x/src/RequestController.res.mjs";
import * as ProjectResolution$DocgenCore from "@rescript-docgen/core/src/ProjectResolution.res.mjs";

function unwrapResultPromise(result) {
  var result$1;
  result$1 = result.TAG === "Ok" ? ({
        TAG: "Ok",
        _0: result._0
      }) : ({
        TAG: "Error",
        _0: result._0
      });
  if (result$1.TAG === "Ok") {
    return result$1._0.then(function (x) {
                return {
                        TAG: "Ok",
                        _0: x
                      };
              });
  } else {
    return Promise.resolve({
                TAG: "Error",
                _0: result$1._0
              });
  }
}

async function currentProjectDetails() {
  var currentDirectory = Process.cwd();
  var currentConfig = await ProjectResolution$DocgenCore.findProjectConfig(currentDirectory);
  return await unwrapResultPromise(Core__Result.map(currentConfig, (function (config) {
                      return ProjectResolution$DocgenCore.projectModules(config.sources, currentDirectory);
                    }))).then(function (__x) {
              return Core__Result.map(__x, (function (moduleList) {
                            return moduleList.map(function (modulePath) {
                                        return {
                                                path: modulePath,
                                                name: ProjectResolution$DocgenCore.pathToModuleName(modulePath)
                                              };
                                      });
                          }));
            });
}

var server = Bun.serve({
      development: BunUtils$ResX.isDev,
      port: 4444,
      fetch: (async function (request, server) {
          var staticResponse = await BunUtils$ResX.serveStaticFile(request);
          if (staticResponse !== undefined) {
            return Caml_option.valFromOption(staticResponse);
          } else {
            return await Handlers$ResX.handleRequest(Handler.handler, {
                        request: request,
                        render: (async function (param) {
                            RequestController$ResX.appendTitleSegment(param.requestController, "Test App");
                            var deets = await currentProjectDetails();
                            var deets$1;
                            deets$1 = deets.TAG === "Ok" ? Hjsx$ResX.jsx(Hjsx$ResX.jsxFragment, {
                                    children: Caml_option.some(deets._0.map(function (mod) {
                                              return Hjsx$ResX.Elements.jsx("div", {
                                                          children: mod.name
                                                        });
                                            }))
                                  }) : Hjsx$ResX.jsx(Hjsx$ResX.jsxFragment, {
                                    children: Caml_option.some(deets._0)
                                  });
                            return Hjsx$ResX.jsx(Layout.Html.make, {
                                        children: Hjsx$ResX.Elements.jsxs("div", {
                                              children: [
                                                "Start page!",
                                                deets$1
                                              ]
                                            })
                                      });
                          }),
                        setupHeaders: (function () {
                            return new Headers([[
                                          "Content-Type",
                                          "text/html"
                                        ]]);
                          })
                      });
          }
        })
    });

var portString = server.port.toString();

console.log("Listening on localhost:" + portString);

if (BunUtils$ResX.isDev) {
  BunUtils$ResX.runDevServer(4444);
}

var port = 4444;

export {
  port ,
  unwrapResultPromise ,
  currentProjectDetails ,
  server ,
  portString ,
}
/* server Not a pure module */
