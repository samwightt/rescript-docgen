// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Buntest from "bun:test";
import * as Nodepath from "node:path";
import * as ProjectResolution from "../src/ProjectResolution.res.mjs";

Buntest.describe("ProjectResolution", (function () {
        Buntest.describe("getSourceDirs", (function () {
                var pathsToSources = function (x) {
                  return x.map(function (path) {
                              return {
                                      dir: path,
                                      isDev: false,
                                      subdirs: "NoSubdirs"
                                    };
                            });
                };
                var orderIndependentEqual = function (arr, shouldEqual) {
                  Buntest.expect(arr).toHaveLength(shouldEqual.length);
                  shouldEqual.forEach(function (item) {
                        Buntest.expect(arr).toContain(item);
                      });
                };
                Buntest.test("concats source dirs with path", (async function () {
                        var res = await ProjectResolution.getSourceDirs(pathsToSources([
                                  "./src",
                                  "./test"
                                ]), "/foo/bar");
                        return orderIndependentEqual(res, [
                                    "/foo/bar/src",
                                    "/foo/bar/test"
                                  ]);
                      }));
                Buntest.test("handles empty sources", (async function () {
                        var res = await ProjectResolution.getSourceDirs(pathsToSources([]), "/foo/bar");
                        return orderIndependentEqual(res, []);
                      }));
                Buntest.test("handles static subdir lists", (async function () {
                        var res = await ProjectResolution.getSourceDirs([{
                                dir: "./src",
                                isDev: false,
                                subdirs: {
                                  TAG: "SubdirList",
                                  _0: [{
                                      dir: "./nested",
                                      isDev: false,
                                      subdirs: {
                                        TAG: "SubdirList",
                                        _0: [{
                                            dir: "./deeply-nested",
                                            isDev: false,
                                            subdirs: "NoSubdirs"
                                          }]
                                      }
                                    }]
                                }
                              }], "/foo/bar");
                        return orderIndependentEqual(res, [
                                    "/foo/bar/src",
                                    "/foo/bar/src/nested",
                                    "/foo/bar/src/nested/deeply-nested"
                                  ]);
                      }));
                Buntest.test("handles TraverseAll subdirs", (async function () {
                        var basePath = __dirname;
                        var root = Nodepath.resolve(basePath, "../");
                        var res = await ProjectResolution.getSourceDirs([{
                                dir: "./node_modules/sury",
                                isDev: false,
                                subdirs: "TraverseAll"
                              }], root);
                        var expectedDirs = [
                            "node_modules/sury",
                            "node_modules/sury/src",
                            "node_modules/sury/lib",
                            "node_modules/sury/ocaml",
                            "node_modules/sury/bs",
                            "node_modules/sury/src"
                          ].map(function (x) {
                              return Nodepath.resolve(root, x);
                            });
                        return orderIndependentEqual(res, expectedDirs);
                      }));
              }));
      }));

export {
  
}
/*  Not a pure module */
